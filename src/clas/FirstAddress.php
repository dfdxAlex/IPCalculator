<?php
namespace src\clas;

/**
 * The class returns the first or last host address
 * Класс возвращает первый или последний адрес хоста
 */

class FirstAddress
{
    private $in;

    public function __construct($in)
    {
        $this->in = $in;
    }

    // Функция возвращает первый доступный адрес хоста добавляя единицу к адресу сети 
    // если не подавать число хостов
    // если подать в переменную $hostov число хостов в сети, то получим 
    // последний адрес сети
    public function firstAddress($adsress, $hostov=1)
    {
        $address2=$this->in->ip10To2->ip10To2($adsress);
        $nomer=0;

        // переводим двоичный адрес в десятичный, чтобы добавить единицу
        for ($i=1; $i<33; $i++) {
             if (substr($address2,$i-1,1)=='1') $nomer+=$this->bit32($i);
        }
        if ($nomer>4294967294) return 'В этой сети нет свободных адресов:)';

        // добавляем единицу - это будет первый адрес в сети
        $nomer=$nomer+$hostov;

        return $this->in->maska->maska10($this->in->nomer10to2->nomer10to2($nomer, 32));
    }

    // функция возвращает вес бита за 32 разряда
    function bit32($nomer)
    {
         return match ($nomer) {
             32=>1,
             31=>2,
             30=>4,
             29=>8,
             28=>16,
             27=>32,
             26=>64,
             25=>128,
             24=>256,
             23=>512,
             22=>1024,
             21=>2048,
             20=>4096,
             19=>8192,
             18=>16384,
             17=>32768,
             16=>65536,
             15=>131072,
             14=>262144,
             13=>524288,
             12=>1048576,
             11=>2097152,
             10=>4194304,
             9=>8388608,
             8=>16777216,
             7=>33554432,
             6=>67108864,
             5=>134217728,
             4=>268435456,
             3=>536870912,
             2=>1073741824,
             1=>2147483648,

         };
    }
}
